basePath: /api
definitions:
  models.ErrorResponse:
    properties:
      error:
        description: |-
          Сообщение об ошибке
          example: Invalid credentials
        type: string
    type: object
  models.LoginRequest:
    properties:
      login:
        description: |-
          Логин пользователя
          required: true
          example: johndoe
        type: string
      password:
        description: |-
          Пароль пользователя
          required: true
          example: securePassword123
        type: string
    required:
    - login
    - password
    type: object
  models.LoginResponse:
    properties:
      message:
        description: |-
          Сообщение о результате
          example: Logged in successfully
        type: string
    type: object
  models.ProfileResponse:
    properties:
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Данные пользователя
    type: object
  models.ProfileUpdateRequest:
    properties:
      birthDate:
        description: |-
          Дата рождения пользователя
          example: 1990-01-01T00:00:00Z
        type: string
      email:
        description: |-
          Email пользователя
          example: john.doe@example.com
        type: string
      name:
        description: |-
          Имя пользователя
          example: John
        maxLength: 50
        minLength: 2
        type: string
      phoneNumber:
        description: |-
          Номер телефона пользователя
          example: +12345678901
        type: string
      surname:
        description: |-
          Фамилия пользователя
          example: Doe
        maxLength: 50
        minLength: 2
        type: string
    type: object
  models.ProfileUpdateResponse:
    properties:
      status:
        description: |-
          Статус операции
          example: Profile updated successfully
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Обновленные данные пользователя
    type: object
  models.RegisterRequest:
    properties:
      email:
        description: |-
          Email пользователя
          required: true
          example: john.doe@example.com
        type: string
      login:
        description: |-
          Логин пользователя (минимум 3 символа)
          required: true
          min length: 3
          max length: 50
          example: johndoe
        maxLength: 50
        minLength: 3
        type: string
      password:
        description: |-
          Пароль пользователя (минимум 6 символов)
          required: true
          min length: 6
          example: securePassword123
        maxLength: 100
        minLength: 6
        type: string
    required:
    - email
    - login
    - password
    type: object
  models.RegisterResponse:
    properties:
      status:
        description: |-
          Статус операции
          example: user created
        type: string
    type: object
  models.User:
    properties:
      birthDate:
        description: |-
          Дата рождения пользователя
          example: 1990-01-01T00:00:00Z
        type: string
      createdAt:
        description: |-
          Дата создания пользователя
          example: 2023-01-01T12:00:00Z
        type: string
      email:
        description: |-
          Email пользователя
          example: john.doe@example.com
        type: string
      login:
        description: |-
          Логин пользователя
          example: johndoe
        type: string
      name:
        description: |-
          Имя пользователя
          example: John
        type: string
      phoneNumber:
        description: |-
          Номер телефона пользователя
          example: +12345678901
        type: string
      surname:
        description: |-
          Фамилия пользователя
          example: Doe
        type: string
      updatedAt:
        description: |-
          Дата последнего обновления пользователя
          example: 2023-01-02T12:00:00Z
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  description: API сервис для управления пользователями
  title: User Service API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Выполняет вход пользователя в систему
      parameters:
      - description: Данные для входа
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Аутентификация пользователя
      tags:
      - Authentication
  /profile:
    get:
      description: Возвращает профиль текущего авторизованного пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - sessionAuth: []
      summary: Получение профиля пользователя
      tags:
      - Profile
    put:
      consumes:
      - application/json
      description: Обновляет данные профиля текущего пользователя
      parameters:
      - description: Новые данные для профиля
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ProfileUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfileUpdateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - sessionAuth: []
      summary: Обновление профиля пользователя
      tags:
      - Profile
  /register:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя в системе
      parameters:
      - description: Данные для регистрации
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Регистрация нового пользователя
      tags:
      - Authentication
schemes:
- http
securityDefinitions:
  sessionAuth:
    in: cookie
    name: user-session
    type: apiKey
swagger: "2.0"
