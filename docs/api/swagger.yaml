basePath: /api
definitions:
  models.AddCommentRequest:
    properties:
      content:
        description: |-
          Текст комментария
          required: true
          example: Отличный пост, спасибо за информацию!
        type: string
    required:
    - content
    type: object
  models.Comment:
    properties:
      content:
        description: |-
          Текст комментария
          example: Это очень интересный пост!
        type: string
      created_at:
        description: |-
          Дата создания комментария
          example: 2023-01-15T14:30:45Z
        type: string
      id:
        description: |-
          ID комментария
          example: 456
        type: integer
      post_id:
        description: |-
          ID поста, к которому относится комментарий
          example: 123
        type: integer
      user_id:
        description: |-
          ID пользователя, оставившего комментарий
          example: 42
        type: integer
    type: object
  models.CommentListResponse:
    properties:
      comments:
        description: Список комментариев
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      total_count:
        description: |-
          Общее количество комментариев
          example: 25
        type: integer
    type: object
  models.CommentResponse:
    properties:
      comment:
        allOf:
        - $ref: '#/definitions/models.Comment'
        description: Данные комментария
    type: object
  models.CreatePostRequest:
    properties:
      description:
        description: |-
          Описание поста
          example: Это описание моего первого поста
        type: string
      is_private:
        description: |-
          Флаг приватности
          example: false
        type: boolean
      tags:
        description: |-
          Список тегов
          example: ["тег1", "тег2"]
        items:
          type: string
        type: array
      title:
        description: |-
          Название поста
          example: Мой первый пост
          required: true
        type: string
    required:
    - title
    type: object
  models.DeletePostResponse:
    properties:
      success:
        description: |-
          Результат удаления
          example: true
        type: boolean
    type: object
  models.ErrorResponse:
    properties:
      error:
        description: |-
          Сообщение об ошибке
          example: Invalid credentials
        type: string
    type: object
  models.LikePostResponse:
    properties:
      success:
        description: |-
          Успешность операции лайка
          example: true
        type: boolean
      total_likes:
        description: |-
          Общее количество лайков у поста
          example: 42
        type: integer
    type: object
  models.LoginRequest:
    properties:
      login:
        description: |-
          Логин пользователя
          required: true
          example: johndoe
        type: string
      password:
        description: |-
          Пароль пользователя
          required: true
          example: securePassword123
        type: string
    required:
    - login
    - password
    type: object
  models.LoginResponse:
    properties:
      message:
        description: |-
          Сообщение о результате
          example: Logged in successfully
        type: string
    type: object
  models.PostListResponse:
    properties:
      posts:
        description: Список постов
        items:
          $ref: '#/definitions/models.PostResponse'
        type: array
      total_count:
        description: |-
          Общее количество постов
          example: 42
        type: integer
    type: object
  models.PostResponse:
    properties:
      created_at:
        description: |-
          Дата создания поста
          example: 2023-01-01T12:00:00Z
        type: string
      creator_id:
        description: |-
          ID создателя поста
          example: 42
        type: integer
      description:
        description: |-
          Описание поста
          example: Это описание моего первого поста
        type: string
      id:
        description: |-
          ID поста
          example: 123
        type: integer
      is_private:
        description: |-
          Флаг приватности
          example: false
        type: boolean
      tags:
        description: |-
          Список тегов
          example: ["тег1", "тег2"]
        items:
          type: string
        type: array
      title:
        description: |-
          Название поста
          example: Мой первый пост
        type: string
      updated_at:
        description: |-
          Дата обновления поста
          example: 2023-01-02T12:00:00Z
        type: string
    type: object
  models.PostStatsResponse:
    properties:
      comments_count:
        description: |-
          Количество комментариев
          example: 45
        type: integer
      likes_count:
        description: |-
          Количество лайков
          example: 320
        type: integer
      post_id:
        description: |-
          ID поста
          example: 123
        type: integer
      views_count:
        description: |-
          Количество просмотров
          example: 1500
        type: integer
    type: object
  models.ProfileResponse:
    properties:
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Данные пользователя
    type: object
  models.ProfileUpdateRequest:
    properties:
      birthDate:
        description: |-
          Дата рождения пользователя
          example: 1990-01-01T00:00:00Z
        type: string
      email:
        description: |-
          Email пользователя
          example: john.doe@example.com
        type: string
      name:
        description: |-
          Имя пользователя
          example: John
        maxLength: 50
        minLength: 2
        type: string
      phoneNumber:
        description: |-
          Номер телефона пользователя
          example: +12345678901
        type: string
      surname:
        description: |-
          Фамилия пользователя
          example: Doe
        maxLength: 50
        minLength: 2
        type: string
    type: object
  models.ProfileUpdateResponse:
    properties:
      status:
        description: |-
          Статус операции
          example: Profile updated successfully
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Обновленные данные пользователя
    type: object
  models.RegisterRequest:
    properties:
      email:
        description: |-
          Email пользователя
          required: true
          example: john.doe@example.com
        type: string
      login:
        description: |-
          Логин пользователя (минимум 3 символа)
          required: true
          min length: 3
          max length: 50
          example: johndoe
        maxLength: 50
        minLength: 3
        type: string
      password:
        description: |-
          Пароль пользователя (минимум 6 символов)
          required: true
          min length: 6
          example: securePassword123
        maxLength: 100
        minLength: 6
        type: string
    required:
    - email
    - login
    - password
    type: object
  models.RegisterResponse:
    properties:
      status:
        description: |-
          Статус операции
          example: user created
        type: string
    type: object
  models.SuccessResponse:
    properties:
      success:
        description: |-
          Успешность выполнения операции
          example: true
        type: boolean
    type: object
  models.TimelineItem:
    properties:
      count:
        description: |-
          Количество событий
          example: 42
        type: integer
      date:
        description: |-
          Дата (день)
          example: 2023-09-01T00:00:00Z
        type: string
    type: object
  models.TimelineResponse:
    properties:
      items:
        description: Временная динамика по дням
        items:
          $ref: '#/definitions/models.TimelineItem'
        type: array
    type: object
  models.TopPostItem:
    properties:
      count:
        description: |-
          Количество (просмотров/лайков/комментариев)
          example: 1500
        type: integer
      post_id:
        description: |-
          ID поста
          example: 123
        type: integer
    type: object
  models.TopPostsResponse:
    properties:
      posts:
        description: Список топ постов
        items:
          $ref: '#/definitions/models.TopPostItem'
        type: array
    type: object
  models.TopUserItem:
    properties:
      count:
        description: |-
          Количество (просмотров/лайков/комментариев)
          example: 1500
        type: integer
      user_id:
        description: |-
          ID пользователя
          example: 42
        type: integer
    type: object
  models.TopUsersResponse:
    properties:
      users:
        description: Список топ пользователей
        items:
          $ref: '#/definitions/models.TopUserItem'
        type: array
    type: object
  models.UpdatePostRequest:
    properties:
      description:
        description: |-
          Описание поста
          example: Обновленное описание поста
        type: string
      is_private:
        description: |-
          Флаг приватности
          example: true
        type: boolean
      tags:
        description: |-
          Список тегов
          example: ["тег1", "тег2", "новыйТег"]
        items:
          type: string
        type: array
      title:
        description: |-
          Название поста
          example: Обновленное название поста
        type: string
    type: object
  models.User:
    properties:
      birthDate:
        description: |-
          Дата рождения пользователя
          example: 1990-01-01T00:00:00Z
        type: string
      createdAt:
        description: |-
          Дата создания пользователя
          example: 2023-01-01T12:00:00Z
        type: string
      email:
        description: |-
          Email пользователя
          example: john.doe@example.com
        type: string
      id:
        description: |-
          ID пользователя
          example: 1
        type: integer
      login:
        description: |-
          Логин пользователя
          example: johndoe
        type: string
      name:
        description: |-
          Имя пользователя
          example: John
        type: string
      phoneNumber:
        description: |-
          Номер телефона пользователя
          example: +12345678901
        type: string
      surname:
        description: |-
          Фамилия пользователя
          example: Doe
        type: string
      updatedAt:
        description: |-
          Дата последнего обновления пользователя
          example: 2023-01-02T12:00:00Z
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API шлюз для доступа к сервисам системы
  title: API Gateway Service
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Выполняет вход пользователя в систему
      parameters:
      - description: Данные для входа
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Аутентификация пользователя
      tags:
      - Authentication
  /posts:
    get:
      description: Возвращает пагинированный список постов
      parameters:
      - description: Номер страницы (по умолчанию 1)
        in: query
        name: page
        type: integer
      - description: Размер страницы (по умолчанию 20)
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - sessionAuth: []
      summary: Получение списка постов
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Создает новый пост от имени текущего пользователя
      parameters:
      - description: Данные для создания поста
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - sessionAuth: []
      summary: Создание нового поста
      tags:
      - Posts
  /posts/{id}:
    delete:
      description: Удаляет пост по его ID
      parameters:
      - description: ID поста
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeletePostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - sessionAuth: []
      summary: Удаление поста
      tags:
      - Posts
    get:
      description: Возвращает пост по его ID
      parameters:
      - description: ID поста
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - sessionAuth: []
      summary: Получение поста по ID
      tags:
      - Posts
    put:
      consumes:
      - application/json
      description: Обновляет данные поста
      parameters:
      - description: ID поста
        in: path
        name: id
        required: true
        type: string
      - description: Новые данные для поста
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - sessionAuth: []
      summary: Обновление поста
      tags:
      - Posts
  /posts/{id}/comments:
    get:
      description: Возвращает список комментариев к посту с пагинацией
      parameters:
      - description: ID поста
        in: path
        name: id
        required: true
        type: string
      - description: Номер страницы (по умолчанию 1)
        in: query
        name: page
        type: integer
      - description: Размер страницы (по умолчанию 20)
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommentListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - sessionAuth: []
      summary: Получение комментариев к посту
      tags:
      - Comments
    post:
      consumes:
      - application/json
      description: Добавляет новый комментарий к посту от имени текущего пользователя
        и отправляет событие в Kafka
      parameters:
      - description: ID поста
        in: path
        name: id
        required: true
        type: string
      - description: Данные комментария
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - sessionAuth: []
      summary: Добавление комментария к посту
      tags:
      - Comments
  /posts/{id}/like:
    post:
      description: Ставит или убирает лайк поста текущим пользователем и отправляет
        событие в Kafka
      parameters:
      - description: ID поста
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LikePostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - sessionAuth: []
      summary: Лайк поста
      tags:
      - Posts
  /posts/{id}/view:
    post:
      description: Регистрирует просмотр поста текущим пользователем и отправляет
        событие в Kafka
      parameters:
      - description: ID поста
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - sessionAuth: []
      summary: Просмотр поста
      tags:
      - Posts
  /profile:
    get:
      description: Возвращает профиль текущего авторизованного пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - sessionAuth: []
      summary: Получение профиля пользователя
      tags:
      - Profile
    put:
      consumes:
      - application/json
      description: Обновляет данные профиля текущего пользователя
      parameters:
      - description: Новые данные для профиля
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ProfileUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfileUpdateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - sessionAuth: []
      summary: Обновление профиля пользователя
      tags:
      - Profile
  /register:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя в системе
      parameters:
      - description: Данные для регистрации
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Регистрация нового пользователя
      tags:
      - Authentication
  /stats/posts/{id}:
    get:
      description: Возвращает количество просмотров, лайков и комментариев по посту
      parameters:
      - description: ID поста
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostStatsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Получение статистики по посту
      tags:
      - Statistics
  /stats/posts/{id}/comments/timeline:
    get:
      description: Возвращает массив с датой (день) и количеством комментариев за
        день
      parameters:
      - description: ID поста
        in: path
        name: id
        required: true
        type: string
      - description: Количество дней (по умолчанию 30)
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TimelineResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Получение динамики комментариев по посту
      tags:
      - Statistics
  /stats/posts/{id}/likes/timeline:
    get:
      description: Возвращает массив с датой (день) и количеством лайков за день
      parameters:
      - description: ID поста
        in: path
        name: id
        required: true
        type: string
      - description: Количество дней (по умолчанию 30)
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TimelineResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Получение динамики лайков по посту
      tags:
      - Statistics
  /stats/posts/{id}/views/timeline:
    get:
      description: Возвращает массив с датой (день) и количеством просмотров за день
      parameters:
      - description: ID поста
        in: path
        name: id
        required: true
        type: string
      - description: Количество дней (по умолчанию 30)
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TimelineResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Получение динамики просмотров по посту
      tags:
      - Statistics
  /stats/posts/top:
    get:
      description: Возвращает топ-10 постов по количеству просмотров, лайков или комментариев
      parameters:
      - description: Тип метрики (views, likes, comments)
        in: query
        name: metric_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TopPostsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Получение топ-10 постов
      tags:
      - Statistics
  /stats/users/top:
    get:
      description: Возвращает топ-10 пользователей по количеству просмотров, лайков
        или комментариев
      parameters:
      - description: Тип метрики (views, likes, comments)
        in: query
        name: metric_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TopUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Получение топ-10 пользователей
      tags:
      - Statistics
schemes:
- http
securityDefinitions:
  sessionAuth:
    in: cookie
    name: user-session
    type: apiKey
swagger: "2.0"
